// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package sdk

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AuthSsoTokenPost request
	AuthSsoTokenPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenPost request
	AuthTokenPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PigeonholeControllersPkiPkiGet request
	PigeonholeControllersPkiPkiGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecretDelete request
	SecretDelete(ctx context.Context, params *SecretDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecretGet request
	SecretGet(ctx context.Context, params *SecretGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecretPostWithBody request with any body
	SecretPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SecretPost(ctx context.Context, body SecretPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SecretIdDelete request
	SecretIdDelete(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecretId request
	GetSecretId(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadSecretBlob request
	DownloadSecretBlob(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserGet request
	UserGet(ctx context.Context, params *UserGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserMeGet request
	UserMeGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserMeKeyGet request
	UserMeKeyGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserMeKeyPostWithBody request with any body
	UserMeKeyPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserMeKeyPost(ctx context.Context, body UserMeKeyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserMeKeyValidateThumbprintGet request
	UserMeKeyValidateThumbprintGet(ctx context.Context, thumbprint string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserMeRotateshortcodePost request
	UserMeRotateshortcodePost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserIdGet request
	UserIdGet(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserIdKeyGet request
	UserIdKeyGet(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserIdKeyPostWithBody request with any body
	UserIdKeyPostWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserIdKeyPost(ctx context.Context, userId string, body UserIdKeyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserIdKeyIdDeleteWithBody request with any body
	UserIdKeyIdDeleteWithBody(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserIdKeyIdDelete(ctx context.Context, userId string, keyId string, body UserIdKeyIdDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserIdKeyIdGetWithBody request with any body
	UserIdKeyIdGetWithBody(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserIdKeyIdGet(ctx context.Context, userId string, keyId string, body UserIdKeyIdGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserPublicGet request
	UserPublicGet(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AuthSsoTokenPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthSsoTokenPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PigeonholeControllersPkiPkiGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPigeonholeControllersPkiPkiGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretDelete(ctx context.Context, params *SecretDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretGet(ctx context.Context, params *SecretGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretPost(ctx context.Context, body SecretPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SecretIdDelete(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSecretIdDeleteRequest(c.Server, secretId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecretId(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretIdRequest(c.Server, secretId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadSecretBlob(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadSecretBlobRequest(c.Server, secretId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserGet(ctx context.Context, params *UserGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserMeGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserMeGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserMeKeyGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserMeKeyGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserMeKeyPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserMeKeyPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserMeKeyPost(ctx context.Context, body UserMeKeyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserMeKeyPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserMeKeyValidateThumbprintGet(ctx context.Context, thumbprint string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserMeKeyValidateThumbprintGetRequest(c.Server, thumbprint)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserMeRotateshortcodePost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserMeRotateshortcodePostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserIdGet(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserIdGetRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserIdKeyGet(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserIdKeyGetRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserIdKeyPostWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserIdKeyPostRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserIdKeyPost(ctx context.Context, userId string, body UserIdKeyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserIdKeyPostRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserIdKeyIdDeleteWithBody(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserIdKeyIdDeleteRequestWithBody(c.Server, userId, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserIdKeyIdDelete(ctx context.Context, userId string, keyId string, body UserIdKeyIdDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserIdKeyIdDeleteRequest(c.Server, userId, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserIdKeyIdGetWithBody(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserIdKeyIdGetRequestWithBody(c.Server, userId, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserIdKeyIdGet(ctx context.Context, userId string, keyId string, body UserIdKeyIdGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserIdKeyIdGetRequest(c.Server, userId, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserPublicGet(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserPublicGetRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAuthSsoTokenPostRequest generates requests for AuthSsoTokenPost
func NewAuthSsoTokenPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/sso/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthTokenPostRequest generates requests for AuthTokenPost
func NewAuthTokenPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPigeonholeControllersPkiPkiGetRequest generates requests for PigeonholeControllersPkiPkiGet
func NewPigeonholeControllersPkiPkiGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pki")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecretDeleteRequest generates requests for SecretDelete
func NewSecretDeleteRequest(server string, params *SecretDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecretGetRequest generates requests for SecretGet
func NewSecretGetRequest(server string, params *SecretGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSecretPostRequest calls the generic SecretPost builder with application/json body
func NewSecretPostRequest(server string, body SecretPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSecretPostRequestWithBody(server, "application/json", bodyReader)
}

// NewSecretPostRequestWithBody generates requests for SecretPost with any type of body
func NewSecretPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSecretIdDeleteRequest generates requests for SecretIdDelete
func NewSecretIdDeleteRequest(server string, secretId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secret_id", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSecretIdRequest generates requests for GetSecretId
func NewGetSecretIdRequest(server string, secretId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secret_id", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadSecretBlobRequest generates requests for DownloadSecretBlob
func NewDownloadSecretBlobRequest(server string, secretId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secret_id", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserGetRequest generates requests for UserGet
func NewUserGetRequest(server string, params *UserGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserMeGetRequest generates requests for UserMeGet
func NewUserMeGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserMeKeyGetRequest generates requests for UserMeKeyGet
func NewUserMeKeyGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/me/key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserMeKeyPostRequest calls the generic UserMeKeyPost builder with application/json body
func NewUserMeKeyPostRequest(server string, body UserMeKeyPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserMeKeyPostRequestWithBody(server, "application/json", bodyReader)
}

// NewUserMeKeyPostRequestWithBody generates requests for UserMeKeyPost with any type of body
func NewUserMeKeyPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/me/key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserMeKeyValidateThumbprintGetRequest generates requests for UserMeKeyValidateThumbprintGet
func NewUserMeKeyValidateThumbprintGetRequest(server string, thumbprint string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thumbprint", runtime.ParamLocationPath, thumbprint)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/me/key/validate/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserMeRotateshortcodePostRequest generates requests for UserMeRotateshortcodePost
func NewUserMeRotateshortcodePostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/me/rotate-shortcode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserIdGetRequest generates requests for UserIdGet
func NewUserIdGetRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserIdKeyGetRequest generates requests for UserIdKeyGet
func NewUserIdKeyGetRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserIdKeyPostRequest calls the generic UserIdKeyPost builder with application/json body
func NewUserIdKeyPostRequest(server string, userId string, body UserIdKeyPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserIdKeyPostRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewUserIdKeyPostRequestWithBody generates requests for UserIdKeyPost with any type of body
func NewUserIdKeyPostRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserIdKeyIdDeleteRequest calls the generic UserIdKeyIdDelete builder with application/json body
func NewUserIdKeyIdDeleteRequest(server string, userId string, keyId string, body UserIdKeyIdDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserIdKeyIdDeleteRequestWithBody(server, userId, keyId, "application/json", bodyReader)
}

// NewUserIdKeyIdDeleteRequestWithBody generates requests for UserIdKeyIdDelete with any type of body
func NewUserIdKeyIdDeleteRequestWithBody(server string, userId string, keyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/key/%s/key", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserIdKeyIdGetRequest calls the generic UserIdKeyIdGet builder with application/json body
func NewUserIdKeyIdGetRequest(server string, userId string, keyId string, body UserIdKeyIdGetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserIdKeyIdGetRequestWithBody(server, userId, keyId, "application/json", bodyReader)
}

// NewUserIdKeyIdGetRequestWithBody generates requests for UserIdKeyIdGet with any type of body
func NewUserIdKeyIdGetRequestWithBody(server string, userId string, keyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/key/%s/key", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserPublicGetRequest generates requests for UserPublicGet
func NewUserPublicGetRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/public", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AuthSsoTokenPostWithResponse request
	AuthSsoTokenPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthSsoTokenPostResponse, error)

	// AuthTokenPostWithResponse request
	AuthTokenPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthTokenPostResponse, error)

	// PigeonholeControllersPkiPkiGetWithResponse request
	PigeonholeControllersPkiPkiGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PigeonholeControllersPkiPkiGetResponse, error)

	// SecretDeleteWithResponse request
	SecretDeleteWithResponse(ctx context.Context, params *SecretDeleteParams, reqEditors ...RequestEditorFn) (*SecretDeleteResponse, error)

	// SecretGetWithResponse request
	SecretGetWithResponse(ctx context.Context, params *SecretGetParams, reqEditors ...RequestEditorFn) (*SecretGetResponse, error)

	// SecretPostWithBodyWithResponse request with any body
	SecretPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecretPostResponse, error)

	SecretPostWithResponse(ctx context.Context, body SecretPostJSONRequestBody, reqEditors ...RequestEditorFn) (*SecretPostResponse, error)

	// SecretIdDeleteWithResponse request
	SecretIdDeleteWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*SecretIdDeleteResponse, error)

	// GetSecretIdWithResponse request
	GetSecretIdWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*GetSecretIdResponse, error)

	// DownloadSecretBlobWithResponse request
	DownloadSecretBlobWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*DownloadSecretBlobResponse, error)

	// UserGetWithResponse request
	UserGetWithResponse(ctx context.Context, params *UserGetParams, reqEditors ...RequestEditorFn) (*UserGetResponse, error)

	// UserMeGetWithResponse request
	UserMeGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserMeGetResponse, error)

	// UserMeKeyGetWithResponse request
	UserMeKeyGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserMeKeyGetResponse, error)

	// UserMeKeyPostWithBodyWithResponse request with any body
	UserMeKeyPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserMeKeyPostResponse, error)

	UserMeKeyPostWithResponse(ctx context.Context, body UserMeKeyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*UserMeKeyPostResponse, error)

	// UserMeKeyValidateThumbprintGetWithResponse request
	UserMeKeyValidateThumbprintGetWithResponse(ctx context.Context, thumbprint string, reqEditors ...RequestEditorFn) (*UserMeKeyValidateThumbprintGetResponse, error)

	// UserMeRotateshortcodePostWithResponse request
	UserMeRotateshortcodePostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserMeRotateshortcodePostResponse, error)

	// UserIdGetWithResponse request
	UserIdGetWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*UserIdGetResponse, error)

	// UserIdKeyGetWithResponse request
	UserIdKeyGetWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*UserIdKeyGetResponse, error)

	// UserIdKeyPostWithBodyWithResponse request with any body
	UserIdKeyPostWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserIdKeyPostResponse, error)

	UserIdKeyPostWithResponse(ctx context.Context, userId string, body UserIdKeyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*UserIdKeyPostResponse, error)

	// UserIdKeyIdDeleteWithBodyWithResponse request with any body
	UserIdKeyIdDeleteWithBodyWithResponse(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserIdKeyIdDeleteResponse, error)

	UserIdKeyIdDeleteWithResponse(ctx context.Context, userId string, keyId string, body UserIdKeyIdDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*UserIdKeyIdDeleteResponse, error)

	// UserIdKeyIdGetWithBodyWithResponse request with any body
	UserIdKeyIdGetWithBodyWithResponse(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserIdKeyIdGetResponse, error)

	UserIdKeyIdGetWithResponse(ctx context.Context, userId string, keyId string, body UserIdKeyIdGetJSONRequestBody, reqEditors ...RequestEditorFn) (*UserIdKeyIdGetResponse, error)

	// UserPublicGetWithResponse request
	UserPublicGetWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*UserPublicGetResponse, error)
}

type AuthSsoTokenPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Token
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r AuthSsoTokenPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthSsoTokenPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthTokenPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r AuthTokenPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PigeonholeControllersPkiPkiGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r PigeonholeControllersPkiPkiGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PigeonholeControllersPkiPkiGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecretDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r SecretDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecretDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecretGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secrets
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r SecretGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecretGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecretPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateSecretResponse
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON404      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r SecretPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecretPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SecretIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r SecretIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SecretIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSecretIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadSecretBlobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r DownloadSecretBlobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadSecretBlobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Users
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserMeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserMeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserMeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserMeKeyGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Keys
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserMeKeyGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserMeKeyGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserMeKeyPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Key
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserMeKeyPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserMeKeyPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserMeKeyValidateThumbprintGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserMeKeyValidateThumbprintGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserMeKeyValidateThumbprintGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserMeRotateshortcodePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserMeRotateshortcodePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserMeRotateshortcodePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserIdKeyGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Keys
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserIdKeyGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserIdKeyGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserIdKeyPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserIdKeyPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserIdKeyPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserIdKeyIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserIdKeyIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserIdKeyIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserIdKeyIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserIdKeyIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserIdKeyIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserPublicGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralErrorResponse
	JSON401      *GeneralErrorResponse
	JSON403      *GeneralErrorResponse
	JSON500      *GeneralErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserPublicGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserPublicGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AuthSsoTokenPostWithResponse request returning *AuthSsoTokenPostResponse
func (c *ClientWithResponses) AuthSsoTokenPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthSsoTokenPostResponse, error) {
	rsp, err := c.AuthSsoTokenPost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthSsoTokenPostResponse(rsp)
}

// AuthTokenPostWithResponse request returning *AuthTokenPostResponse
func (c *ClientWithResponses) AuthTokenPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthTokenPostResponse, error) {
	rsp, err := c.AuthTokenPost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenPostResponse(rsp)
}

// PigeonholeControllersPkiPkiGetWithResponse request returning *PigeonholeControllersPkiPkiGetResponse
func (c *ClientWithResponses) PigeonholeControllersPkiPkiGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PigeonholeControllersPkiPkiGetResponse, error) {
	rsp, err := c.PigeonholeControllersPkiPkiGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePigeonholeControllersPkiPkiGetResponse(rsp)
}

// SecretDeleteWithResponse request returning *SecretDeleteResponse
func (c *ClientWithResponses) SecretDeleteWithResponse(ctx context.Context, params *SecretDeleteParams, reqEditors ...RequestEditorFn) (*SecretDeleteResponse, error) {
	rsp, err := c.SecretDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretDeleteResponse(rsp)
}

// SecretGetWithResponse request returning *SecretGetResponse
func (c *ClientWithResponses) SecretGetWithResponse(ctx context.Context, params *SecretGetParams, reqEditors ...RequestEditorFn) (*SecretGetResponse, error) {
	rsp, err := c.SecretGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretGetResponse(rsp)
}

// SecretPostWithBodyWithResponse request with arbitrary body returning *SecretPostResponse
func (c *ClientWithResponses) SecretPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SecretPostResponse, error) {
	rsp, err := c.SecretPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretPostResponse(rsp)
}

func (c *ClientWithResponses) SecretPostWithResponse(ctx context.Context, body SecretPostJSONRequestBody, reqEditors ...RequestEditorFn) (*SecretPostResponse, error) {
	rsp, err := c.SecretPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretPostResponse(rsp)
}

// SecretIdDeleteWithResponse request returning *SecretIdDeleteResponse
func (c *ClientWithResponses) SecretIdDeleteWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*SecretIdDeleteResponse, error) {
	rsp, err := c.SecretIdDelete(ctx, secretId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSecretIdDeleteResponse(rsp)
}

// GetSecretIdWithResponse request returning *GetSecretIdResponse
func (c *ClientWithResponses) GetSecretIdWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*GetSecretIdResponse, error) {
	rsp, err := c.GetSecretId(ctx, secretId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretIdResponse(rsp)
}

// DownloadSecretBlobWithResponse request returning *DownloadSecretBlobResponse
func (c *ClientWithResponses) DownloadSecretBlobWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*DownloadSecretBlobResponse, error) {
	rsp, err := c.DownloadSecretBlob(ctx, secretId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadSecretBlobResponse(rsp)
}

// UserGetWithResponse request returning *UserGetResponse
func (c *ClientWithResponses) UserGetWithResponse(ctx context.Context, params *UserGetParams, reqEditors ...RequestEditorFn) (*UserGetResponse, error) {
	rsp, err := c.UserGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserGetResponse(rsp)
}

// UserMeGetWithResponse request returning *UserMeGetResponse
func (c *ClientWithResponses) UserMeGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserMeGetResponse, error) {
	rsp, err := c.UserMeGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserMeGetResponse(rsp)
}

// UserMeKeyGetWithResponse request returning *UserMeKeyGetResponse
func (c *ClientWithResponses) UserMeKeyGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserMeKeyGetResponse, error) {
	rsp, err := c.UserMeKeyGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserMeKeyGetResponse(rsp)
}

// UserMeKeyPostWithBodyWithResponse request with arbitrary body returning *UserMeKeyPostResponse
func (c *ClientWithResponses) UserMeKeyPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserMeKeyPostResponse, error) {
	rsp, err := c.UserMeKeyPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserMeKeyPostResponse(rsp)
}

func (c *ClientWithResponses) UserMeKeyPostWithResponse(ctx context.Context, body UserMeKeyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*UserMeKeyPostResponse, error) {
	rsp, err := c.UserMeKeyPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserMeKeyPostResponse(rsp)
}

// UserMeKeyValidateThumbprintGetWithResponse request returning *UserMeKeyValidateThumbprintGetResponse
func (c *ClientWithResponses) UserMeKeyValidateThumbprintGetWithResponse(ctx context.Context, thumbprint string, reqEditors ...RequestEditorFn) (*UserMeKeyValidateThumbprintGetResponse, error) {
	rsp, err := c.UserMeKeyValidateThumbprintGet(ctx, thumbprint, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserMeKeyValidateThumbprintGetResponse(rsp)
}

// UserMeRotateshortcodePostWithResponse request returning *UserMeRotateshortcodePostResponse
func (c *ClientWithResponses) UserMeRotateshortcodePostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserMeRotateshortcodePostResponse, error) {
	rsp, err := c.UserMeRotateshortcodePost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserMeRotateshortcodePostResponse(rsp)
}

// UserIdGetWithResponse request returning *UserIdGetResponse
func (c *ClientWithResponses) UserIdGetWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*UserIdGetResponse, error) {
	rsp, err := c.UserIdGet(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserIdGetResponse(rsp)
}

// UserIdKeyGetWithResponse request returning *UserIdKeyGetResponse
func (c *ClientWithResponses) UserIdKeyGetWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*UserIdKeyGetResponse, error) {
	rsp, err := c.UserIdKeyGet(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserIdKeyGetResponse(rsp)
}

// UserIdKeyPostWithBodyWithResponse request with arbitrary body returning *UserIdKeyPostResponse
func (c *ClientWithResponses) UserIdKeyPostWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserIdKeyPostResponse, error) {
	rsp, err := c.UserIdKeyPostWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserIdKeyPostResponse(rsp)
}

func (c *ClientWithResponses) UserIdKeyPostWithResponse(ctx context.Context, userId string, body UserIdKeyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*UserIdKeyPostResponse, error) {
	rsp, err := c.UserIdKeyPost(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserIdKeyPostResponse(rsp)
}

// UserIdKeyIdDeleteWithBodyWithResponse request with arbitrary body returning *UserIdKeyIdDeleteResponse
func (c *ClientWithResponses) UserIdKeyIdDeleteWithBodyWithResponse(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserIdKeyIdDeleteResponse, error) {
	rsp, err := c.UserIdKeyIdDeleteWithBody(ctx, userId, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserIdKeyIdDeleteResponse(rsp)
}

func (c *ClientWithResponses) UserIdKeyIdDeleteWithResponse(ctx context.Context, userId string, keyId string, body UserIdKeyIdDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*UserIdKeyIdDeleteResponse, error) {
	rsp, err := c.UserIdKeyIdDelete(ctx, userId, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserIdKeyIdDeleteResponse(rsp)
}

// UserIdKeyIdGetWithBodyWithResponse request with arbitrary body returning *UserIdKeyIdGetResponse
func (c *ClientWithResponses) UserIdKeyIdGetWithBodyWithResponse(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserIdKeyIdGetResponse, error) {
	rsp, err := c.UserIdKeyIdGetWithBody(ctx, userId, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserIdKeyIdGetResponse(rsp)
}

func (c *ClientWithResponses) UserIdKeyIdGetWithResponse(ctx context.Context, userId string, keyId string, body UserIdKeyIdGetJSONRequestBody, reqEditors ...RequestEditorFn) (*UserIdKeyIdGetResponse, error) {
	rsp, err := c.UserIdKeyIdGet(ctx, userId, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserIdKeyIdGetResponse(rsp)
}

// UserPublicGetWithResponse request returning *UserPublicGetResponse
func (c *ClientWithResponses) UserPublicGetWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*UserPublicGetResponse, error) {
	rsp, err := c.UserPublicGet(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserPublicGetResponse(rsp)
}

// ParseAuthSsoTokenPostResponse parses an HTTP response from a AuthSsoTokenPostWithResponse call
func ParseAuthSsoTokenPostResponse(rsp *http.Response) (*AuthSsoTokenPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthSsoTokenPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Token
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthTokenPostResponse parses an HTTP response from a AuthTokenPostWithResponse call
func ParseAuthTokenPostResponse(rsp *http.Response) (*AuthTokenPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePigeonholeControllersPkiPkiGetResponse parses an HTTP response from a PigeonholeControllersPkiPkiGetWithResponse call
func ParsePigeonholeControllersPkiPkiGetResponse(rsp *http.Response) (*PigeonholeControllersPkiPkiGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PigeonholeControllersPkiPkiGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSecretDeleteResponse parses an HTTP response from a SecretDeleteWithResponse call
func ParseSecretDeleteResponse(rsp *http.Response) (*SecretDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecretDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSecretGetResponse parses an HTTP response from a SecretGetWithResponse call
func ParseSecretGetResponse(rsp *http.Response) (*SecretGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecretGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secrets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSecretPostResponse parses an HTTP response from a SecretPostWithResponse call
func ParseSecretPostResponse(rsp *http.Response) (*SecretPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecretPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateSecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSecretIdDeleteResponse parses an HTTP response from a SecretIdDeleteWithResponse call
func ParseSecretIdDeleteResponse(rsp *http.Response) (*SecretIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SecretIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSecretIdResponse parses an HTTP response from a GetSecretIdWithResponse call
func ParseGetSecretIdResponse(rsp *http.Response) (*GetSecretIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDownloadSecretBlobResponse parses an HTTP response from a DownloadSecretBlobWithResponse call
func ParseDownloadSecretBlobResponse(rsp *http.Response) (*DownloadSecretBlobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadSecretBlobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserGetResponse parses an HTTP response from a UserGetWithResponse call
func ParseUserGetResponse(rsp *http.Response) (*UserGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Users
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserMeGetResponse parses an HTTP response from a UserMeGetWithResponse call
func ParseUserMeGetResponse(rsp *http.Response) (*UserMeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserMeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserMeKeyGetResponse parses an HTTP response from a UserMeKeyGetWithResponse call
func ParseUserMeKeyGetResponse(rsp *http.Response) (*UserMeKeyGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserMeKeyGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Keys
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserMeKeyPostResponse parses an HTTP response from a UserMeKeyPostWithResponse call
func ParseUserMeKeyPostResponse(rsp *http.Response) (*UserMeKeyPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserMeKeyPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserMeKeyValidateThumbprintGetResponse parses an HTTP response from a UserMeKeyValidateThumbprintGetWithResponse call
func ParseUserMeKeyValidateThumbprintGetResponse(rsp *http.Response) (*UserMeKeyValidateThumbprintGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserMeKeyValidateThumbprintGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserMeRotateshortcodePostResponse parses an HTTP response from a UserMeRotateshortcodePostWithResponse call
func ParseUserMeRotateshortcodePostResponse(rsp *http.Response) (*UserMeRotateshortcodePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserMeRotateshortcodePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserIdGetResponse parses an HTTP response from a UserIdGetWithResponse call
func ParseUserIdGetResponse(rsp *http.Response) (*UserIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserIdKeyGetResponse parses an HTTP response from a UserIdKeyGetWithResponse call
func ParseUserIdKeyGetResponse(rsp *http.Response) (*UserIdKeyGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserIdKeyGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Keys
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserIdKeyPostResponse parses an HTTP response from a UserIdKeyPostWithResponse call
func ParseUserIdKeyPostResponse(rsp *http.Response) (*UserIdKeyPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserIdKeyPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserIdKeyIdDeleteResponse parses an HTTP response from a UserIdKeyIdDeleteWithResponse call
func ParseUserIdKeyIdDeleteResponse(rsp *http.Response) (*UserIdKeyIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserIdKeyIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserIdKeyIdGetResponse parses an HTTP response from a UserIdKeyIdGetWithResponse call
func ParseUserIdKeyIdGetResponse(rsp *http.Response) (*UserIdKeyIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserIdKeyIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserPublicGetResponse parses an HTTP response from a UserPublicGetWithResponse call
func ParseUserPublicGetResponse(rsp *http.Response) (*UserPublicGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserPublicGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
