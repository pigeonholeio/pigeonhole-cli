// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package sdk

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAuthOidcHandlerProviderWithBody request with any body
	PostAuthOidcHandlerProviderWithBody(ctx context.Context, provider string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthOidcHandlerProvider(ctx context.Context, provider string, body PostAuthOidcHandlerProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthOidcProviders request
	GetAuthOidcProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPing request
	GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecret request
	DeleteSecret(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecret request
	GetSecret(ctx context.Context, params *GetSecretParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecretWithBody request with any body
	PostSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecret(ctx context.Context, body PostSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecretSecretId request
	DeleteSecretSecretId(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecretSecretId request
	GetSecretSecretId(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecretSecretIdDownload request
	GetSecretSecretIdDownload(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserMe request
	GetUserMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserMeKey request
	GetUserMeKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserMeKeyWithBody request with any body
	PostUserMeKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserMeKey(ctx context.Context, body PostUserMeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserMeKeyValidateThumbprint request
	GetUserMeKeyValidateThumbprint(ctx context.Context, thumbprint string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserUserId request
	GetUserUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserUserIdKey request
	GetUserUserIdKey(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserUserIdKeyWithBody request with any body
	PostUserUserIdKeyWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdKey(ctx context.Context, userId string, body PostUserUserIdKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserUserIdKeyValidateThumbprint request
	GetUserUserIdKeyValidateThumbprint(ctx context.Context, userId string, thumbprint string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserUserIdKeyKeyIdWithBody request with any body
	DeleteUserUserIdKeyKeyIdWithBody(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUserUserIdKeyKeyId(ctx context.Context, userId string, keyId string, body DeleteUserUserIdKeyKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserUserIdKeyKeyIdWithBody request with any body
	GetUserUserIdKeyKeyIdWithBody(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUserUserIdKeyKeyId(ctx context.Context, userId string, keyId string, body GetUserUserIdKeyKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserUserIdPublic request
	GetUserUserIdPublic(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAuthOidcHandlerProviderWithBody(ctx context.Context, provider string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthOidcHandlerProviderRequestWithBody(c.Server, provider, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthOidcHandlerProvider(ctx context.Context, provider string, body PostAuthOidcHandlerProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthOidcHandlerProviderRequest(c.Server, provider, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthOidcProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthOidcProvidersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecret(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecret(ctx context.Context, params *GetSecretParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecret(ctx context.Context, body PostSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecretSecretId(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretSecretIdRequest(c.Server, secretId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecretSecretId(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretSecretIdRequest(c.Server, secretId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecretSecretIdDownload(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretSecretIdDownloadRequest(c.Server, secretId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserMeKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserMeKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserMeKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserMeKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserMeKey(ctx context.Context, body PostUserMeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserMeKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserMeKeyValidateThumbprint(ctx context.Context, thumbprint string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserMeKeyValidateThumbprintRequest(c.Server, thumbprint)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserUserIdKey(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserUserIdKeyRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdKeyWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdKeyRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdKey(ctx context.Context, userId string, body PostUserUserIdKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdKeyRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserUserIdKeyValidateThumbprint(ctx context.Context, userId string, thumbprint string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserUserIdKeyValidateThumbprintRequest(c.Server, userId, thumbprint)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserUserIdKeyKeyIdWithBody(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserUserIdKeyKeyIdRequestWithBody(c.Server, userId, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserUserIdKeyKeyId(ctx context.Context, userId string, keyId string, body DeleteUserUserIdKeyKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserUserIdKeyKeyIdRequest(c.Server, userId, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserUserIdKeyKeyIdWithBody(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserUserIdKeyKeyIdRequestWithBody(c.Server, userId, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserUserIdKeyKeyId(ctx context.Context, userId string, keyId string, body GetUserUserIdKeyKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserUserIdKeyKeyIdRequest(c.Server, userId, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserUserIdPublic(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserUserIdPublicRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAuthOidcHandlerProviderRequest calls the generic PostAuthOidcHandlerProvider builder with application/json body
func NewPostAuthOidcHandlerProviderRequest(server string, provider string, body PostAuthOidcHandlerProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthOidcHandlerProviderRequestWithBody(server, provider, "application/json", bodyReader)
}

// NewPostAuthOidcHandlerProviderRequestWithBody generates requests for PostAuthOidcHandlerProvider with any type of body
func NewPostAuthOidcHandlerProviderRequestWithBody(server string, provider string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/oidc/handler/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthOidcProvidersRequest generates requests for GetAuthOidcProviders
func NewGetAuthOidcProvidersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/oidc/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPingRequest generates requests for GetPing
func NewGetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSecretRequest generates requests for DeleteSecret
func NewDeleteSecretRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSecretRequest generates requests for GetSecret
func NewGetSecretRequest(server string, params *GetSecretParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.All != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, *params.All); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSecretRequest calls the generic PostSecret builder with application/json body
func NewPostSecretRequest(server string, body PostSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecretRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSecretRequestWithBody generates requests for PostSecret with any type of body
func NewPostSecretRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSecretSecretIdRequest generates requests for DeleteSecretSecretId
func NewDeleteSecretSecretIdRequest(server string, secretId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secret_id", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSecretSecretIdRequest generates requests for GetSecretSecretId
func NewGetSecretSecretIdRequest(server string, secretId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secret_id", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSecretSecretIdDownloadRequest generates requests for GetSecretSecretIdDownload
func NewGetSecretSecretIdDownloadRequest(server string, secretId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secret_id", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secret/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, params *GetUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ephemeralkeys", runtime.ParamLocationQuery, params.Ephemeralkeys); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserMeRequest generates requests for GetUserMe
func NewGetUserMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserMeKeyRequest generates requests for GetUserMeKey
func NewGetUserMeKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/me/key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserMeKeyRequest calls the generic PostUserMeKey builder with application/json body
func NewPostUserMeKeyRequest(server string, body PostUserMeKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserMeKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserMeKeyRequestWithBody generates requests for PostUserMeKey with any type of body
func NewPostUserMeKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/me/key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserMeKeyValidateThumbprintRequest generates requests for GetUserMeKeyValidateThumbprint
func NewGetUserMeKeyValidateThumbprintRequest(server string, thumbprint string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thumbprint", runtime.ParamLocationPath, thumbprint)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/me/key/validate/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserUserIdRequest generates requests for GetUserUserId
func NewGetUserUserIdRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserUserIdKeyRequest generates requests for GetUserUserIdKey
func NewGetUserUserIdKeyRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserUserIdKeyRequest calls the generic PostUserUserIdKey builder with application/json body
func NewPostUserUserIdKeyRequest(server string, userId string, body PostUserUserIdKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdKeyRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostUserUserIdKeyRequestWithBody generates requests for PostUserUserIdKey with any type of body
func NewPostUserUserIdKeyRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserUserIdKeyValidateThumbprintRequest generates requests for GetUserUserIdKeyValidateThumbprint
func NewGetUserUserIdKeyValidateThumbprintRequest(server string, userId string, thumbprint string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "thumbprint", runtime.ParamLocationPath, thumbprint)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/key/validate/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserUserIdKeyKeyIdRequest calls the generic DeleteUserUserIdKeyKeyId builder with application/json body
func NewDeleteUserUserIdKeyKeyIdRequest(server string, userId string, keyId string, body DeleteUserUserIdKeyKeyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserUserIdKeyKeyIdRequestWithBody(server, userId, keyId, "application/json", bodyReader)
}

// NewDeleteUserUserIdKeyKeyIdRequestWithBody generates requests for DeleteUserUserIdKeyKeyId with any type of body
func NewDeleteUserUserIdKeyKeyIdRequestWithBody(server string, userId string, keyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/key/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserUserIdKeyKeyIdRequest calls the generic GetUserUserIdKeyKeyId builder with application/json body
func NewGetUserUserIdKeyKeyIdRequest(server string, userId string, keyId string, body GetUserUserIdKeyKeyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUserUserIdKeyKeyIdRequestWithBody(server, userId, keyId, "application/json", bodyReader)
}

// NewGetUserUserIdKeyKeyIdRequestWithBody generates requests for GetUserUserIdKeyKeyId with any type of body
func NewGetUserUserIdKeyKeyIdRequestWithBody(server string, userId string, keyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/key/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserUserIdPublicRequest generates requests for GetUserUserIdPublic
func NewGetUserUserIdPublicRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s/public", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAuthOidcHandlerProviderWithBodyWithResponse request with any body
	PostAuthOidcHandlerProviderWithBodyWithResponse(ctx context.Context, provider string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthOidcHandlerProviderResponse, error)

	PostAuthOidcHandlerProviderWithResponse(ctx context.Context, provider string, body PostAuthOidcHandlerProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthOidcHandlerProviderResponse, error)

	// GetAuthOidcProvidersWithResponse request
	GetAuthOidcProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthOidcProvidersResponse, error)

	// GetPingWithResponse request
	GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error)

	// DeleteSecretWithResponse request
	DeleteSecretWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteSecretResponse, error)

	// GetSecretWithResponse request
	GetSecretWithResponse(ctx context.Context, params *GetSecretParams, reqEditors ...RequestEditorFn) (*GetSecretResponse, error)

	// PostSecretWithBodyWithResponse request with any body
	PostSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretResponse, error)

	PostSecretWithResponse(ctx context.Context, body PostSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretResponse, error)

	// DeleteSecretSecretIdWithResponse request
	DeleteSecretSecretIdWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*DeleteSecretSecretIdResponse, error)

	// GetSecretSecretIdWithResponse request
	GetSecretSecretIdWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*GetSecretSecretIdResponse, error)

	// GetSecretSecretIdDownloadWithResponse request
	GetSecretSecretIdDownloadWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*GetSecretSecretIdDownloadResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// GetUserMeWithResponse request
	GetUserMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserMeResponse, error)

	// GetUserMeKeyWithResponse request
	GetUserMeKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserMeKeyResponse, error)

	// PostUserMeKeyWithBodyWithResponse request with any body
	PostUserMeKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserMeKeyResponse, error)

	PostUserMeKeyWithResponse(ctx context.Context, body PostUserMeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserMeKeyResponse, error)

	// GetUserMeKeyValidateThumbprintWithResponse request
	GetUserMeKeyValidateThumbprintWithResponse(ctx context.Context, thumbprint string, reqEditors ...RequestEditorFn) (*GetUserMeKeyValidateThumbprintResponse, error)

	// GetUserUserIdWithResponse request
	GetUserUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserUserIdResponse, error)

	// GetUserUserIdKeyWithResponse request
	GetUserUserIdKeyWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserUserIdKeyResponse, error)

	// PostUserUserIdKeyWithBodyWithResponse request with any body
	PostUserUserIdKeyWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdKeyResponse, error)

	PostUserUserIdKeyWithResponse(ctx context.Context, userId string, body PostUserUserIdKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdKeyResponse, error)

	// GetUserUserIdKeyValidateThumbprintWithResponse request
	GetUserUserIdKeyValidateThumbprintWithResponse(ctx context.Context, userId string, thumbprint string, reqEditors ...RequestEditorFn) (*GetUserUserIdKeyValidateThumbprintResponse, error)

	// DeleteUserUserIdKeyKeyIdWithBodyWithResponse request with any body
	DeleteUserUserIdKeyKeyIdWithBodyWithResponse(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserUserIdKeyKeyIdResponse, error)

	DeleteUserUserIdKeyKeyIdWithResponse(ctx context.Context, userId string, keyId string, body DeleteUserUserIdKeyKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserUserIdKeyKeyIdResponse, error)

	// GetUserUserIdKeyKeyIdWithBodyWithResponse request with any body
	GetUserUserIdKeyKeyIdWithBodyWithResponse(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUserUserIdKeyKeyIdResponse, error)

	GetUserUserIdKeyKeyIdWithResponse(ctx context.Context, userId string, keyId string, body GetUserUserIdKeyKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUserUserIdKeyKeyIdResponse, error)

	// GetUserUserIdPublicWithResponse request
	GetUserUserIdPublicWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserUserIdPublicResponse, error)
}

type PostAuthOidcHandlerProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GeneralMessageWithTokenResponse
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r PostAuthOidcHandlerProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthOidcHandlerProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthOidcProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GeneralMessageWithOIDCProvidersResponse
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r GetAuthOidcProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthOidcProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GeneralMessageWithServerInfoResponse
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GeneralMessageResponse
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r DeleteSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GeneralMessageWithSecretsResponse
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r GetSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GeneralMessageWithSecretEnvelopeResponse
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON406      *GeneralMessageResponse
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r PostSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecretSecretIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GeneralMessageWithSecretResponse
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r DeleteSecretSecretIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecretSecretIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretSecretIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GeneralMessageWithSecretResponse
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r GetSecretSecretIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretSecretIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretSecretIdDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON307      *GeneralMessageWithDownloadResponse
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r GetSecretSecretIdDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretSecretIdDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GeneralMessageWithUsersResponse
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GeneralMessageWithUserResponse
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r GetUserMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserMeKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GeneralMessageWithKeysResponse
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r GetUserMeKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserMeKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserMeKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Key
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r PostUserMeKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserMeKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserMeKeyValidateThumbprintResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GeneralMessageWithKeyResponse
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r GetUserMeKeyValidateThumbprintResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserMeKeyValidateThumbprintResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserUserIdKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Keys
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserUserIdKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserUserIdKeyValidateThumbprintResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdKeyValidateThumbprintResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdKeyValidateThumbprintResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserUserIdKeyKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r DeleteUserUserIdKeyKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserUserIdKeyKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserUserIdKeyKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdKeyKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdKeyKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserUserIdPublicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GeneralMessage
	JSON401      *GeneralMessage
	JSON403      *GeneralMessage
	JSON404      *GeneralMessage
	JSON500      *GeneralMessage
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdPublicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdPublicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAuthOidcHandlerProviderWithBodyWithResponse request with arbitrary body returning *PostAuthOidcHandlerProviderResponse
func (c *ClientWithResponses) PostAuthOidcHandlerProviderWithBodyWithResponse(ctx context.Context, provider string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthOidcHandlerProviderResponse, error) {
	rsp, err := c.PostAuthOidcHandlerProviderWithBody(ctx, provider, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthOidcHandlerProviderResponse(rsp)
}

func (c *ClientWithResponses) PostAuthOidcHandlerProviderWithResponse(ctx context.Context, provider string, body PostAuthOidcHandlerProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthOidcHandlerProviderResponse, error) {
	rsp, err := c.PostAuthOidcHandlerProvider(ctx, provider, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthOidcHandlerProviderResponse(rsp)
}

// GetAuthOidcProvidersWithResponse request returning *GetAuthOidcProvidersResponse
func (c *ClientWithResponses) GetAuthOidcProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthOidcProvidersResponse, error) {
	rsp, err := c.GetAuthOidcProviders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthOidcProvidersResponse(rsp)
}

// GetPingWithResponse request returning *GetPingResponse
func (c *ClientWithResponses) GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error) {
	rsp, err := c.GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPingResponse(rsp)
}

// DeleteSecretWithResponse request returning *DeleteSecretResponse
func (c *ClientWithResponses) DeleteSecretWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteSecretResponse, error) {
	rsp, err := c.DeleteSecret(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretResponse(rsp)
}

// GetSecretWithResponse request returning *GetSecretResponse
func (c *ClientWithResponses) GetSecretWithResponse(ctx context.Context, params *GetSecretParams, reqEditors ...RequestEditorFn) (*GetSecretResponse, error) {
	rsp, err := c.GetSecret(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretResponse(rsp)
}

// PostSecretWithBodyWithResponse request with arbitrary body returning *PostSecretResponse
func (c *ClientWithResponses) PostSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretResponse, error) {
	rsp, err := c.PostSecretWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretResponse(rsp)
}

func (c *ClientWithResponses) PostSecretWithResponse(ctx context.Context, body PostSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretResponse, error) {
	rsp, err := c.PostSecret(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretResponse(rsp)
}

// DeleteSecretSecretIdWithResponse request returning *DeleteSecretSecretIdResponse
func (c *ClientWithResponses) DeleteSecretSecretIdWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*DeleteSecretSecretIdResponse, error) {
	rsp, err := c.DeleteSecretSecretId(ctx, secretId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretSecretIdResponse(rsp)
}

// GetSecretSecretIdWithResponse request returning *GetSecretSecretIdResponse
func (c *ClientWithResponses) GetSecretSecretIdWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*GetSecretSecretIdResponse, error) {
	rsp, err := c.GetSecretSecretId(ctx, secretId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretSecretIdResponse(rsp)
}

// GetSecretSecretIdDownloadWithResponse request returning *GetSecretSecretIdDownloadResponse
func (c *ClientWithResponses) GetSecretSecretIdDownloadWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*GetSecretSecretIdDownloadResponse, error) {
	rsp, err := c.GetSecretSecretIdDownload(ctx, secretId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretSecretIdDownloadResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetUserMeWithResponse request returning *GetUserMeResponse
func (c *ClientWithResponses) GetUserMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserMeResponse, error) {
	rsp, err := c.GetUserMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserMeResponse(rsp)
}

// GetUserMeKeyWithResponse request returning *GetUserMeKeyResponse
func (c *ClientWithResponses) GetUserMeKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserMeKeyResponse, error) {
	rsp, err := c.GetUserMeKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserMeKeyResponse(rsp)
}

// PostUserMeKeyWithBodyWithResponse request with arbitrary body returning *PostUserMeKeyResponse
func (c *ClientWithResponses) PostUserMeKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserMeKeyResponse, error) {
	rsp, err := c.PostUserMeKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserMeKeyResponse(rsp)
}

func (c *ClientWithResponses) PostUserMeKeyWithResponse(ctx context.Context, body PostUserMeKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserMeKeyResponse, error) {
	rsp, err := c.PostUserMeKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserMeKeyResponse(rsp)
}

// GetUserMeKeyValidateThumbprintWithResponse request returning *GetUserMeKeyValidateThumbprintResponse
func (c *ClientWithResponses) GetUserMeKeyValidateThumbprintWithResponse(ctx context.Context, thumbprint string, reqEditors ...RequestEditorFn) (*GetUserMeKeyValidateThumbprintResponse, error) {
	rsp, err := c.GetUserMeKeyValidateThumbprint(ctx, thumbprint, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserMeKeyValidateThumbprintResponse(rsp)
}

// GetUserUserIdWithResponse request returning *GetUserUserIdResponse
func (c *ClientWithResponses) GetUserUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserUserIdResponse, error) {
	rsp, err := c.GetUserUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserUserIdResponse(rsp)
}

// GetUserUserIdKeyWithResponse request returning *GetUserUserIdKeyResponse
func (c *ClientWithResponses) GetUserUserIdKeyWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserUserIdKeyResponse, error) {
	rsp, err := c.GetUserUserIdKey(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserUserIdKeyResponse(rsp)
}

// PostUserUserIdKeyWithBodyWithResponse request with arbitrary body returning *PostUserUserIdKeyResponse
func (c *ClientWithResponses) PostUserUserIdKeyWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdKeyResponse, error) {
	rsp, err := c.PostUserUserIdKeyWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdKeyResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdKeyWithResponse(ctx context.Context, userId string, body PostUserUserIdKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdKeyResponse, error) {
	rsp, err := c.PostUserUserIdKey(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdKeyResponse(rsp)
}

// GetUserUserIdKeyValidateThumbprintWithResponse request returning *GetUserUserIdKeyValidateThumbprintResponse
func (c *ClientWithResponses) GetUserUserIdKeyValidateThumbprintWithResponse(ctx context.Context, userId string, thumbprint string, reqEditors ...RequestEditorFn) (*GetUserUserIdKeyValidateThumbprintResponse, error) {
	rsp, err := c.GetUserUserIdKeyValidateThumbprint(ctx, userId, thumbprint, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserUserIdKeyValidateThumbprintResponse(rsp)
}

// DeleteUserUserIdKeyKeyIdWithBodyWithResponse request with arbitrary body returning *DeleteUserUserIdKeyKeyIdResponse
func (c *ClientWithResponses) DeleteUserUserIdKeyKeyIdWithBodyWithResponse(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserUserIdKeyKeyIdResponse, error) {
	rsp, err := c.DeleteUserUserIdKeyKeyIdWithBody(ctx, userId, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserUserIdKeyKeyIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserUserIdKeyKeyIdWithResponse(ctx context.Context, userId string, keyId string, body DeleteUserUserIdKeyKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserUserIdKeyKeyIdResponse, error) {
	rsp, err := c.DeleteUserUserIdKeyKeyId(ctx, userId, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserUserIdKeyKeyIdResponse(rsp)
}

// GetUserUserIdKeyKeyIdWithBodyWithResponse request with arbitrary body returning *GetUserUserIdKeyKeyIdResponse
func (c *ClientWithResponses) GetUserUserIdKeyKeyIdWithBodyWithResponse(ctx context.Context, userId string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUserUserIdKeyKeyIdResponse, error) {
	rsp, err := c.GetUserUserIdKeyKeyIdWithBody(ctx, userId, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserUserIdKeyKeyIdResponse(rsp)
}

func (c *ClientWithResponses) GetUserUserIdKeyKeyIdWithResponse(ctx context.Context, userId string, keyId string, body GetUserUserIdKeyKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUserUserIdKeyKeyIdResponse, error) {
	rsp, err := c.GetUserUserIdKeyKeyId(ctx, userId, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserUserIdKeyKeyIdResponse(rsp)
}

// GetUserUserIdPublicWithResponse request returning *GetUserUserIdPublicResponse
func (c *ClientWithResponses) GetUserUserIdPublicWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserUserIdPublicResponse, error) {
	rsp, err := c.GetUserUserIdPublic(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserUserIdPublicResponse(rsp)
}

// ParsePostAuthOidcHandlerProviderResponse parses an HTTP response from a PostAuthOidcHandlerProviderWithResponse call
func ParsePostAuthOidcHandlerProviderResponse(rsp *http.Response) (*PostAuthOidcHandlerProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthOidcHandlerProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GeneralMessageWithTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAuthOidcProvidersResponse parses an HTTP response from a GetAuthOidcProvidersWithResponse call
func ParseGetAuthOidcProvidersResponse(rsp *http.Response) (*GetAuthOidcProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthOidcProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GeneralMessageWithOIDCProvidersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPingResponse parses an HTTP response from a GetPingWithResponse call
func ParseGetPingResponse(rsp *http.Response) (*GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GeneralMessageWithServerInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSecretResponse parses an HTTP response from a DeleteSecretWithResponse call
func ParseDeleteSecretResponse(rsp *http.Response) (*DeleteSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GeneralMessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSecretResponse parses an HTTP response from a GetSecretWithResponse call
func ParseGetSecretResponse(rsp *http.Response) (*GetSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GeneralMessageWithSecretsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostSecretResponse parses an HTTP response from a PostSecretWithResponse call
func ParsePostSecretResponse(rsp *http.Response) (*PostSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GeneralMessageWithSecretEnvelopeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest GeneralMessageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSecretSecretIdResponse parses an HTTP response from a DeleteSecretSecretIdWithResponse call
func ParseDeleteSecretSecretIdResponse(rsp *http.Response) (*DeleteSecretSecretIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecretSecretIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GeneralMessageWithSecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSecretSecretIdResponse parses an HTTP response from a GetSecretSecretIdWithResponse call
func ParseGetSecretSecretIdResponse(rsp *http.Response) (*GetSecretSecretIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretSecretIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GeneralMessageWithSecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSecretSecretIdDownloadResponse parses an HTTP response from a GetSecretSecretIdDownloadWithResponse call
func ParseGetSecretSecretIdDownloadResponse(rsp *http.Response) (*GetSecretSecretIdDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretSecretIdDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest GeneralMessageWithDownloadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GeneralMessageWithUsersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserMeResponse parses an HTTP response from a GetUserMeWithResponse call
func ParseGetUserMeResponse(rsp *http.Response) (*GetUserMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GeneralMessageWithUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserMeKeyResponse parses an HTTP response from a GetUserMeKeyWithResponse call
func ParseGetUserMeKeyResponse(rsp *http.Response) (*GetUserMeKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserMeKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GeneralMessageWithKeysResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostUserMeKeyResponse parses an HTTP response from a PostUserMeKeyWithResponse call
func ParsePostUserMeKeyResponse(rsp *http.Response) (*PostUserMeKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserMeKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Key
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserMeKeyValidateThumbprintResponse parses an HTTP response from a GetUserMeKeyValidateThumbprintWithResponse call
func ParseGetUserMeKeyValidateThumbprintResponse(rsp *http.Response) (*GetUserMeKeyValidateThumbprintResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserMeKeyValidateThumbprintResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GeneralMessageWithKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserUserIdResponse parses an HTTP response from a GetUserUserIdWithResponse call
func ParseGetUserUserIdResponse(rsp *http.Response) (*GetUserUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserUserIdKeyResponse parses an HTTP response from a GetUserUserIdKeyWithResponse call
func ParseGetUserUserIdKeyResponse(rsp *http.Response) (*GetUserUserIdKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserUserIdKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Keys
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostUserUserIdKeyResponse parses an HTTP response from a PostUserUserIdKeyWithResponse call
func ParsePostUserUserIdKeyResponse(rsp *http.Response) (*PostUserUserIdKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserUserIdKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserUserIdKeyValidateThumbprintResponse parses an HTTP response from a GetUserUserIdKeyValidateThumbprintWithResponse call
func ParseGetUserUserIdKeyValidateThumbprintResponse(rsp *http.Response) (*GetUserUserIdKeyValidateThumbprintResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserUserIdKeyValidateThumbprintResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserUserIdKeyKeyIdResponse parses an HTTP response from a DeleteUserUserIdKeyKeyIdWithResponse call
func ParseDeleteUserUserIdKeyKeyIdResponse(rsp *http.Response) (*DeleteUserUserIdKeyKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserUserIdKeyKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserUserIdKeyKeyIdResponse parses an HTTP response from a GetUserUserIdKeyKeyIdWithResponse call
func ParseGetUserUserIdKeyKeyIdResponse(rsp *http.Response) (*GetUserUserIdKeyKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserUserIdKeyKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserUserIdPublicResponse parses an HTTP response from a GetUserUserIdPublicWithResponse call
func ParseGetUserUserIdPublicResponse(rsp *http.Response) (*GetUserUserIdPublicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserUserIdPublicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GeneralMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
