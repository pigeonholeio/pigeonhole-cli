// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package sdk

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateSecretEnvelopeOptions defines model for CreateSecretEnvelopeOptions.
type CreateSecretEnvelopeOptions struct {
	// Ephemeralkeys A reference string for the secret.
	Ephemeralkeys *bool      `json:"ephemeralkeys,omitempty"`
	Expiration    *time.Time `json:"expiration,omitempty"`
	Onetime       *bool      `json:"onetime,omitempty"`

	// RecipientIds A list of recipient IDs.
	RecipientIds []string `json:"recipient_ids"`

	// Reference A reference string for the secret.
	Reference string `json:"reference"`
}

// GeneralMessage defines model for GeneralMessage.
type GeneralMessage struct {
	Code    *int    `json:"code"`
	Message *string `json:"message"`
}

// Key defines model for Key.
type Key struct {
	CreatedAt  *time.Time          `json:"created_at,omitempty"`
	Id         *openapi_types.UUID `json:"id,omitempty"`
	KeyData    *string             `json:"key_data,omitempty"`
	Reference  *string             `json:"reference,omitempty"`
	Thumbprint *string             `json:"thumbprint,omitempty"`
}

// NewKey defines model for NewKey.
type NewKey struct {
	Force      *bool   `json:"force,omitempty"`
	KeyData    *string `json:"key_data,omitempty"`
	Only       *bool   `json:"only,omitempty"`
	Reference  *string `json:"reference,omitempty"`
	Thumbprint *string `json:"thumbprint,omitempty"`
}

// OIDCProvider defines model for OIDCProvider.
type OIDCProvider struct {
	AuthUrl       *string   `json:"authUrl,omitempty"`
	ClientID      *string   `json:"clientID,omitempty"`
	DeviceAuthURL *string   `json:"deviceAuthURL,omitempty"`
	HandlerUrl    *string   `json:"handlerUrl"`
	Name          *string   `json:"name,omitempty"`
	Scopes        *[]string `json:"scopes,omitempty"`
	TokenUrl      *string   `json:"tokenUrl,omitempty"`
	UserInfoUrl   *string   `json:"userInfoUrl"`
}

// OIDCProviderToken This is used to pass the IdP issued id/access token to exchange it for a PigeonHole access token
type OIDCProviderToken struct {
	AccessToken *string `json:"accessToken,omitempty"`
}

// Secret defines model for Secret.
type Secret struct {
	Expiration *time.Time `json:"expiration,omitempty"`
	Onetime    *bool      `json:"onetime,omitempty"`
	Recipient  *string    `json:"recipient,omitempty"`
	Reference  *string    `json:"reference,omitempty"`
	Sender     *string    `json:"sender,omitempty"`
	SentAt     *time.Time `json:"sent_at,omitempty"`
	Size       *int64     `json:"size,omitempty"`
}

// SecretEnvelopeResponse defines model for SecretEnvelopeResponse.
type SecretEnvelopeResponse struct {
	Expiration *time.Time `json:"expiration,omitempty"`
	Onetime    *bool      `json:"onetime,omitempty"`
	S3Info     *struct {
		Fields *struct {
			Key                  *string   `json:"key,omitempty"`
			Policy               *string   `json:"policy,omitempty"`
			XAmzAlgorithm        *string   `json:"x-amz-algorithm,omitempty"`
			XAmzCredential       *string   `json:"x-amz-credential,omitempty"`
			XAmzDate             *string   `json:"x-amz-date,omitempty"`
			XAmzMetaRecipientIds *[]string `json:"x-amz-meta-recipient_ids,omitempty"`
			XAmzMetaReference    *string   `json:"x-amz-meta-reference,omitempty"`
			XAmzMetaSenderId     *string   `json:"x-amz-meta-sender_id,omitempty"`
			XAmzSignature        *string   `json:"x-amz-signature,omitempty"`
		} `json:"fields,omitempty"`
		Url *string `json:"url,omitempty"`
	} `json:"s3_info,omitempty"`
	Users *[]User `json:"users,omitempty"`
}

// Token A JWT token created by PigeonHole after the IdP ID Token has been excha
type Token struct {
	// AccessToken A JWT token
	AccessToken string `json:"accessToken"`
}

// User defines model for User.
type User struct {
	Email     *string             `json:"email,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Keys      *[]Key              `json:"keys,omitempty"`
	Shortcode *string             `json:"shortcode,omitempty"`
}

// GeneralMessageResponse defines model for GeneralMessageResponse.
type GeneralMessageResponse = GeneralMessage

// GeneralMessageWithDownloadResponse defines model for GeneralMessageWithDownloadResponse.
type GeneralMessageWithDownloadResponse struct {
	Code            *int    `json:"code"`
	DownloadUrl     *string `json:"downloadUrl,omitempty"`
	Message         *string `json:"message"`
	SecretReference *string `json:"secretReference,omitempty"`
}

// GeneralMessageWithKeyResponse defines model for GeneralMessageWithKeyResponse.
type GeneralMessageWithKeyResponse struct {
	Code    *int    `json:"code"`
	Keys    *[]Key  `json:"keys,omitempty"`
	Message *string `json:"message"`
}

// GeneralMessageWithKeysResponse defines model for GeneralMessageWithKeysResponse.
type GeneralMessageWithKeysResponse struct {
	Code    *int    `json:"code"`
	Keys    *[]Key  `json:"keys,omitempty"`
	Message *string `json:"message"`
}

// GeneralMessageWithOIDCProvidersResponse defines model for GeneralMessageWithOIDCProvidersResponse.
type GeneralMessageWithOIDCProvidersResponse struct {
	Code          *int                     `json:"code"`
	Default       *string                  `json:"default,omitempty"`
	Message       *string                  `json:"message"`
	OidcProviders *map[string]OIDCProvider `json:"oidcProviders,omitempty"`
}

// GeneralMessageWithSecretEnvelopeResponse defines model for GeneralMessageWithSecretEnvelopeResponse.
type GeneralMessageWithSecretEnvelopeResponse = SecretEnvelopeResponse

// GeneralMessageWithSecretResponse defines model for GeneralMessageWithSecretResponse.
type GeneralMessageWithSecretResponse struct {
	Code    *int    `json:"code"`
	Message *string `json:"message"`
	Secret  *Secret `json:"secret,omitempty"`
}

// GeneralMessageWithSecretsResponse defines model for GeneralMessageWithSecretsResponse.
type GeneralMessageWithSecretsResponse struct {
	Code    *int      `json:"code"`
	Message *string   `json:"message"`
	Secrets *[]Secret `json:"secrets,omitempty"`
}

// GeneralMessageWithServerInfoResponse defines model for GeneralMessageWithServerInfoResponse.
type GeneralMessageWithServerInfoResponse struct {
	Version *string `json:"version,omitempty"`
}

// GeneralMessageWithTokenResponse defines model for GeneralMessageWithTokenResponse.
type GeneralMessageWithTokenResponse struct {
	// AccessToken A JWT token
	AccessToken string  `json:"accessToken"`
	Code        *int    `json:"code"`
	Message     *string `json:"message"`
}

// GeneralMessageWithUserResponse defines model for GeneralMessageWithUserResponse.
type GeneralMessageWithUserResponse struct {
	Code    *int    `json:"code"`
	Message *string `json:"message"`
	User    *User   `json:"user,omitempty"`
}

// GeneralMessageWithUsersResponse defines model for GeneralMessageWithUsersResponse.
type GeneralMessageWithUsersResponse struct {
	Code    *int    `json:"code"`
	Message *string `json:"message"`
	Users   *[]User `json:"users,omitempty"`
}

// Keys defines model for Keys.
type Keys = []Key

// GetSecretParams defines parameters for GetSecret.
type GetSecretParams struct {
	Reference *string `form:"reference,omitempty" json:"reference,omitempty"`
	All       *bool   `form:"all,omitempty" json:"all,omitempty"`
}

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {
	Ephemeralkeys bool                  `form:"ephemeralkeys" json:"ephemeralkeys"`
	Email         []openapi_types.Email `form:"email" json:"email"`
}

// PostAuthOidcHandlerProviderJSONRequestBody defines body for PostAuthOidcHandlerProvider for application/json ContentType.
type PostAuthOidcHandlerProviderJSONRequestBody = OIDCProviderToken

// PostSecretJSONRequestBody defines body for PostSecret for application/json ContentType.
type PostSecretJSONRequestBody = CreateSecretEnvelopeOptions

// PostUserMeKeyJSONRequestBody defines body for PostUserMeKey for application/json ContentType.
type PostUserMeKeyJSONRequestBody = NewKey

// PostUserUserIdKeyJSONRequestBody defines body for PostUserUserIdKey for application/json ContentType.
type PostUserUserIdKeyJSONRequestBody = NewKey

// DeleteUserUserIdKeyKeyIdJSONRequestBody defines body for DeleteUserUserIdKeyKeyId for application/json ContentType.
type DeleteUserUserIdKeyKeyIdJSONRequestBody = Key

// GetUserUserIdKeyKeyIdJSONRequestBody defines body for GetUserUserIdKeyKeyId for application/json ContentType.
type GetUserUserIdKeyKeyIdJSONRequestBody = Key
